# -*- coding: utf-8 -*-
"""Untitled64.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11kl5AYzsQrViDsUHD-psu0oMtSxol4Lz
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import gradio as gr

# Step 1: Load & Preprocess Data
df = pd.read_csv("medicines.csv")

# Ensure dataset has required columns
required_columns = ["Drug_Name",	"Reason",	"Description", "composition"]
if not set(required_columns).issubset(df.columns):
    raise ValueError(f"CSV file must contain columns: {required_columns}")

# Combine text features for similarity search
df["full_description"] = df["uses"] + " " + df["composition"]

# Tokenization for LSTM
tokenizer = Tokenizer(num_words=5000, oov_token="<OOV>")
tokenizer.fit_on_texts(df["medicine_name"] + df["full_description"])

# Convert text to sequences
medicine_sequences = tokenizer.texts_to_sequences(df["medicine_name"])
description_sequences = tokenizer.texts_to_sequences(df["full_description"])

# Padding
max_length = max(len(seq) for seq in medicine_sequences + description_sequences)
medicine_padded = pad_sequences(medicine_sequences, maxlen=max_length, padding="post")
description_padded = pad_sequences(description_sequences, maxlen=max_length, padding="post")

# Convert to NumPy arrays
medicine_padded = np.array(medicine_padded)
description_padded = np.array(description_padded)

# Vocabulary size
vocab_size = len(tokenizer.word_index) + 1

# Step 2: Build LSTM Model
model = Sequential([
    Embedding(input_dim=vocab_size, output_dim=128, input_length=max_length),
    LSTM(256, return_sequences=True),
    Dropout(0.2),
    LSTM(128),
    Dense(128, activation="relu"),
    Dropout(0.2),
    Dense(vocab_size, activation="softmax")  # Predicts next sequence in response
])

model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
model.summary()

# Step 3: Train LSTM Model
model.fit(medicine_padded, description_padded, epochs=20, batch_size=8, verbose=1)

# Save Model & Tokenizer
model.save("lstm_medicine_chatbot.h5")
import pickle
with open("tokenizer.pkl", "wb") as f:
    pickle.dump(tokenizer, f)

# Step 4: Cosine Similarity for Recommendations
# Convert text data into TF-IDF vectors
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df["full_description"])

def recommend_alternative(medicine_name):
    """Finds the best alternative based on cosine similarity."""
    if medicine_name not in df["medicine_name"].values:
        return "Sorry, I don't have information about this medicine."

    idx = df[df["medicine_name"] == medicine_name].index[0]  # Get index of input medicine
    input_vector = tfidf_matrix[idx]  # Get TF-IDF vector for the medicine

    # Compute cosine similarity
    similarity_scores = cosine_similarity(input_vector, tfidf_matrix)
    similar_idx = np.argsort(similarity_scores[0])[::-1][1:4]  # Get top 3 similar medicines

    # Retrieve alternative medicines
    alternatives = df.iloc[similar_idx]["medicine_name"].values
    return f"Alternatives for {medicine_name}: {', '.join(alternatives)}"

# Step 5: Deploy Chatbot Using Gradio
def chatbot_response(query):
    """Returns LSTM-generated responses & cosine similarity recommendations."""
    sequence = tokenizer.texts_to_sequences([query])
    padded = pad_sequences(sequence, maxlen=max_length, padding="post")

    # Predict the next word sequence
    prediction = model.predict(padded)
    predicted_word_index = np.argmax(prediction, axis=-1)[0]
    response = tokenizer.index_word.get(predicted_word_index, "Sorry, I don't know the answer.")

    # Get recommended alternatives
    recommended = recommend_alternative(query)

    return f"Bot: {response}\n\n{recommended}"

iface = gr.Interface(fn=chatbot_response, inputs="text", outputs="text", title="Alternative Medicine Chatbot (LSTM + Cosine Similarity)")
iface.launch()